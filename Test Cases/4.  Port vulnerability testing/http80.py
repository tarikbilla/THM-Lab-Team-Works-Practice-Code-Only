import requests
import json
import socket
import subprocess
import re

def is_http_port_open(ip, port=80):
    try:
        with socket.create_connection((ip, port), timeout=2):
            print("HTTP port is open and responding")
            return True
    except Exception as e:
        print("HTTP port check failed: " + str(e))
        return False

def get_http_banner(ip, port=80):
    try:
        with socket.create_connection((ip, port), timeout=3) as sock:
            request = f"HEAD / HTTP/1.1\r\nHost: {ip}\r\nConnection: close\r\n\r\n"
            sock.sendall(request.encode())
            response = sock.recv(1024).decode(errors='ignore')
            print("\nHTTP Response Banner:")
            print("---------------------")
            print(response.split("\r\n\r\n")[0])
    except Exception as e:
        print("Failed to get HTTP banner: " + str(e))

def parse_whatweb_output(output):
    """Parse the WhatWeb output and format it nicely."""
    parsed_data = []
    urls = re.findall(r'http://[^\s]+', output)
    country_info = re.findall(r'Country\[([^\]]+)\]', output)
    meta_refresh = re.findall(r'Meta-Refresh-Redirect\[(.*?)\]', output)
    headers = re.findall(r'UncommonHeaders\[(.*?)\]', output)
    title = re.findall(r'Title\[(.*?)\]', output)
    
    # Organizing the extracted information
    for i, url in enumerate(urls):
        data = {
            "URL": url,
            "Country": country_info[i] if i < len(country_info) else "Not Available",
            "Meta-Refresh": meta_refresh[i] if i < len(meta_refresh) else "Not Available",
            "Uncommon-Headers": headers[i] if i < len(headers) else "Not Available",
            "Title": title[i] if i < len(title) else "Not Available"
        }
        parsed_data.append(data)

    # Print organized data
    print("\nWeb Pages:")
    print("-----------------------------")
    for data in parsed_data:
        print(f"URL: {data['URL']}")
        print(f"  Country: {data['Country']}")
        print(f"  Meta-Refresh: {data['Meta-Refresh']}")
        print(f"  Uncommon Headers: {data['Uncommon-Headers']}")
        print(f"  Title: {data['Title']}")
        print("-" * 40)

def run_whatweb(ip):
    """Run WhatWeb command and capture output."""
    try:
        result = subprocess.run(["whatweb", f"http://{ip}"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode == 0:
            parse_whatweb_output(result.stdout)
        else:
            print(f"Error running WhatWeb: {result.stderr}")
    except Exception as e:
        print(f"Failed to run WhatWeb: {str(e)}")

def check_http_vulnerability(ip, port=80):
    if not is_http_port_open(ip, port):
        print("Port is not open. Skipping scan.")
        return False

    get_http_banner(ip, port)

    # Run whatweb on the target IP
    run_whatweb(ip)

    url = f"http://{ip}:{port}/"


if __name__ == "__main__":
    target_ip = input("Enter target IP: ").strip()
    target_port = input("Enter port (default 80): ").strip()
    port = int(target_port) if target_port else 80
    check_http_vulnerability(target_ip, port)
